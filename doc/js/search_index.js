var search_data = {"index":{"searchIndex":["graphcommons","api","apierror","endpoint","search","signal","check_key()","delete()","delete_graph()","edge_create()","edge_delete()","edge_update()","edgetype_delete()","edgetype_update()","get()","get_graph()","get_graph_edges()","get_graph_paths()","get_graph_types()","get_hub()","get_hub_graphs()","get_hub_nodes()","get_hub_paths()","get_hub_types()","get_node()","graphs()","new_graph()","node_create()","node_delete()","node_update()","nodes()","nodetype_delete()","nodetype_update()","post()","put()","quiet!()","search()","set_key()","status()","update_graph()","verbose()","verbose!()","readme","graphcommons.gemspec"],"longSearchIndex":["graphcommons","graphcommons::api","graphcommons::apierror","graphcommons::endpoint","graphcommons::search","graphcommons::signal","graphcommons::api::check_key()","graphcommons::api::delete()","graphcommons::endpoint::delete_graph()","graphcommons::signal::edge_create()","graphcommons::signal::edge_delete()","graphcommons::signal::edge_update()","graphcommons::signal::edgetype_delete()","graphcommons::signal::edgetype_update()","graphcommons::api::get()","graphcommons::endpoint::get_graph()","graphcommons::endpoint::get_graph_edges()","graphcommons::endpoint::get_graph_paths()","graphcommons::endpoint::get_graph_types()","graphcommons::endpoint::get_hub()","graphcommons::endpoint::get_hub_graphs()","graphcommons::endpoint::get_hub_nodes()","graphcommons::endpoint::get_hub_paths()","graphcommons::endpoint::get_hub_types()","graphcommons::endpoint::get_node()","graphcommons::search::graphs()","graphcommons::endpoint::new_graph()","graphcommons::signal::node_create()","graphcommons::signal::node_delete()","graphcommons::signal::node_update()","graphcommons::search::nodes()","graphcommons::signal::nodetype_delete()","graphcommons::signal::nodetype_update()","graphcommons::api::post()","graphcommons::api::put()","graphcommons::quiet!()","graphcommons::search::search()","graphcommons::api::set_key()","graphcommons::endpoint::status()","graphcommons::endpoint::update_graph()","graphcommons::verbose()","graphcommons::verbose!()","",""],"info":[["Graphcommons","","Graphcommons.html","","<p>Ruby wrapper for Graphcommons API.\n<p>More info at: graphcommons.github.io/api-v1/\n"],["Graphcommons::API","","Graphcommons/API.html","","<p>Low-level wrapper for API calls.\n"],["Graphcommons::APIError","","Graphcommons/APIError.html","","<p>Custom error class for *Graphcommons API*.\n"],["Graphcommons::Endpoint","","Graphcommons/Endpoint.html","","<p>Wrapper for general methods in the API.\n"],["Graphcommons::Search","","Graphcommons/Search.html","","<p>Wrapper for <strong>search</strong> endpoints in the API.\n"],["Graphcommons::Signal","","Graphcommons/Signal.html","","<p>Changes to the nodes and edges of a graph are carried out by a series of\ncommands called signals in the …\n"],["check_key","Graphcommons::API","Graphcommons/API.html#method-c-check_key","()","<p>Checks API key to /^sk_.{22}$/ test.\n<p>Returns <code>true</code> or <code>false</code>.\n"],["delete","Graphcommons::API","Graphcommons/API.html#method-c-delete","(endpoint, options = {})","<p>Handles <strong>DELETE</strong> requests, returns API response as ruby\nhash.\n"],["delete_graph","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-delete_graph","(id)","<p>Delete graph with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#delete-graphs-id\n"],["edge_create","Graphcommons::Signal","Graphcommons/Signal.html#method-c-edge_create","(id, options)","<p>This signal type is used for creating edges. Source and target nodes for\nthe edge will be created if …\n"],["edge_delete","Graphcommons::Signal","Graphcommons/Signal.html#method-c-edge_delete","(id, options)","<p>This signal type is used for deleting edges.\n<p>graphcommons.github.io/api-v1/#edge_delete\n"],["edge_update","Graphcommons::Signal","Graphcommons/Signal.html#method-c-edge_update","(id, options)","<p>This signal type is used for updating an edge. All fields except for id\nwill be updated in the node. …\n"],["edgetype_delete","Graphcommons::Signal","Graphcommons/Signal.html#method-c-edgetype_delete","(id, options)","<p>graphcommons.github.io/api-v1/#edgetype_delete\n"],["edgetype_update","Graphcommons::Signal","Graphcommons/Signal.html#method-c-edgetype_update","(id, options)","<p>graphcommons.github.io/api-v1/#edgetype_update\n"],["get","Graphcommons::API","Graphcommons/API.html#method-c-get","(endpoint, options = {})","<p>Handles <strong>GET</strong> requests, returns API response as ruby hash.\n"],["get_graph","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_graph","(id)","<p>Get graph by <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-graphs-id\n"],["get_graph_edges","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_graph_edges","(id, options)","<p>Get edges inside graph with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-graphs-id-edges\n"],["get_graph_paths","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_graph_paths","(id, options)","<p>Query for paths inside graph with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-graphs-id-paths\n"],["get_graph_types","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_graph_types","(id)","<p>Get node and edge types inside graph with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-graphs-id-types\n"],["get_hub","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_hub","(id)","<p>Get hub by <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-hubs-id\n"],["get_hub_graphs","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_hub_graphs","(id, options)","<p>Search for graphs inside hub with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-hubs-id-graphs\n"],["get_hub_nodes","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_hub_nodes","(id, options)","<p>Search for nodes inside  hub with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-hubs-id-nodes\n"],["get_hub_paths","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_hub_paths","(id, options)","<p>Query for paths inside hub with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-hubs-id-paths\n"],["get_hub_types","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_hub_types","(id)","<p>Get node and edge types in hub with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-hubs-id-types\n"],["get_node","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-get_node","(id)","<p>Get node by <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#get-nodes-id\n"],["graphs","Graphcommons::Search","Graphcommons/Search.html#method-c-graphs","(query={})","<p>Search for <strong>graphs</strong>.\n"],["new_graph","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-new_graph","(options)","<p>Create new graph. Required options: <code>:name</code>\n<p>graphcommons.github.io/api-v1/#post-graphs\n"],["node_create","Graphcommons::Signal","Graphcommons/Signal.html#method-c-node_create","(id, options)","<p>This signal type is used for creating nodes. All signals of this type must\ndefine a type and name key. …\n"],["node_delete","Graphcommons::Signal","Graphcommons/Signal.html#method-c-node_delete","(id, options)","<p>This signal type is used for deleting nodes.\n<p>graphcommons.github.io/api-v1/#node_delete\n"],["node_update","Graphcommons::Signal","Graphcommons/Signal.html#method-c-node_update","(id, options)","<p>This signal type is used for updating a node. All fields except for id will\nbe updated in the node.\n<p>graphcommons.github.io/api-v1/#node_update …\n"],["nodes","Graphcommons::Search","Graphcommons/Search.html#method-c-nodes","(query={})","<p>Search for <strong>nodes</strong>.\n"],["nodetype_delete","Graphcommons::Signal","Graphcommons/Signal.html#method-c-nodetype_delete","(id, options)","<p>graphcommons.github.io/api-v1/#nodetype_delete\n"],["nodetype_update","Graphcommons::Signal","Graphcommons/Signal.html#method-c-nodetype_update","(id, options)","<p>graphcommons.github.io/api-v1/#nodetype_update\n"],["post","Graphcommons::API","Graphcommons/API.html#method-c-post","(endpoint, options = {})","<p>Handles <strong>POST</strong> requests, returns API response as ruby hash.\n"],["put","Graphcommons::API","Graphcommons/API.html#method-c-put","(endpoint, options = {})","<p>Handles <strong>PUT</strong> requests, returns API response as ruby hash.\n"],["quiet!","Graphcommons","Graphcommons.html#method-c-quiet-21","()","<p>Switch off verbose output.\n"],["search","Graphcommons::Search","Graphcommons/Search.html#method-c-search","(query={})","<p>Search through <strong>users</strong>, <strong>graphs</strong> and\n<strong>nodes</strong>.\n"],["set_key","Graphcommons::API","Graphcommons/API.html#method-c-set_key","(key)","<p>Sets API key.\n<p>Returns <code>true</code> if key is changed, <code>false</code> if not\nchanged, raises APIError if key argument fails …\n"],["status","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-status","()","<p>Get API status. graphcommons.github.io/api-v1/#get-status\n"],["update_graph","Graphcommons::Endpoint","Graphcommons/Endpoint.html#method-c-update_graph","(id, options)","<p>Modify attributes of graph with <strong>:id</strong>.\n<p>graphcommons.github.io/api-v1/#put-graphs-id\n"],["verbose","Graphcommons","Graphcommons.html#method-c-verbose","()","<p>Check verbose output. Default is <code>false</code>.\n"],["verbose!","Graphcommons","Graphcommons.html#method-c-verbose-21","()","<p>Switch on verbose output.\n"],["README","","README_md.html","","<p>Graphcommons\n<p>Ruby wrapper for Graphcommons API.\n<p>More info at: graphcommons.github.io/api-v1/\n"],["graphcommons.gemspec","","graphcommons_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name        = &#39;graphcommons&#39;\ns.version     = &#39;0.0.4&#39;\ns.date        = &#39;2016-01-09&#39; ...</pre>\n"]]}}